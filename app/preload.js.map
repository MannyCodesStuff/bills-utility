{"version":3,"file":"preload.js","mappings":"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","sources":["webpack://bills-utility/webpack/universalModuleDefinition","webpack://bills-utility/webpack/bootstrap","webpack://bills-utility/webpack/runtime/make namespace object","webpack://bills-utility/external node-commonjs \"electron\"","webpack://bills-utility/./main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { TabType } from '@/components/bill-manager'\nimport { StoreId } from '@/hooks/use-store'\nimport { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron'\n\nconst handler = {\n  send(channel: string, value: unknown) {\n    ipcRenderer.send(channel, value)\n  },\n  on(channel: string, callback: (...args: unknown[]) => void) {\n    const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n      callback(...args)\n    ipcRenderer.on(channel, subscription)\n\n    return () => {\n      ipcRenderer.removeListener(channel, subscription)\n    }\n  },\n  async selectDirectory() {\n    return ipcRenderer.invoke('select-directory')\n  },\n  async getServerStatus() {\n    return ipcRenderer.invoke('get-server-status')\n  },\n  async getDefaultDirectory() {\n    return ipcRenderer.invoke('get-default-directory')\n  },\n  async setDefaultDirectory(directory: string) {\n    return ipcRenderer.invoke('set-default-directory', directory)\n  },\n  async getServerPort() {\n    return ipcRenderer.invoke('get-server-port')\n  },\n  async getVendors() {\n    return ipcRenderer.invoke('get-vendors')\n  },\n  async getASNs(storeId: string, vendorId: string, date: Date) {\n    return ipcRenderer.invoke('get-asn-by-vendor', storeId, vendorId, date)\n  },\n  async getPdfFiles(directoryPath: string) {\n    return ipcRenderer.invoke('get-pdf-files', directoryPath)\n  },\n  async readPdfFile(filePath: string) {\n    return ipcRenderer.invoke('read-pdf-file', filePath)\n  },\n  async getExistingDirectory(storeId: StoreId, type: TabType, date: Date) {\n    return ipcRenderer.invoke('get-existing-directory', storeId, type, date)\n  },\n  async getExistingDirectories(storeId: StoreId, date: Date) {\n    return ipcRenderer.invoke('get-existing-directories', storeId, date)\n  },\n  onServerStatusChange(callback: (status: any) => void) {\n    const subscription = (_event: IpcRendererEvent, status: any) =>\n      callback(status)\n    ipcRenderer.on('server-status', subscription)\n\n    return () => {\n      ipcRenderer.removeListener('server-status', subscription)\n    }\n  },\n  // Update-related APIs\n  async checkForUpdates() {\n    return ipcRenderer.invoke('check-for-updates')\n  },\n  async downloadUpdate() {\n    return ipcRenderer.invoke('download-update')\n  },\n  async installUpdate() {\n    return ipcRenderer.invoke('install-update')\n  },\n  async getAppVersion() {\n    return ipcRenderer.invoke('get-app-version')\n  },\n  onUpdateStatus(callback: (status: any) => void) {\n    const subscription = (_event: IpcRendererEvent, status: any) =>\n      callback(status)\n    ipcRenderer.on('update-status', subscription)\n\n    return () => {\n      ipcRenderer.removeListener('update-status', subscription)\n    }\n  },\n  async renameDocument(data: {\n    filePath: string\n    newFileName: string\n    documentType: string\n    vendorId?: string\n    invoiceNumber?: string\n    invoiceDate?: string\n  }) {\n    return ipcRenderer.invoke('rename-document', data)\n  },\n  async deleteFile(filePath: string) {\n    return ipcRenderer.invoke('delete-file', filePath)\n  },\n  async moveFileToZDrive(data: {\n    filePath: string\n    directoryPath: string\n    documentType: string\n  }) {\n    return ipcRenderer.invoke('move-file-to-zdrive', data)\n  },\n  async uploadPdf(data: {\n    filePath: string\n    vendorId: string\n    invoiceNumber: string\n    invoiceDate: string\n    documentType: string\n    store: StoreId\n    invoiceTotal: number\n  }) {\n    return ipcRenderer.invoke('upload-pdf', data)\n  },\n  // Certificate-related APIs\n  async checkCertificateInstalled() {\n    return ipcRenderer.invoke('check-certificate-installed')\n  },\n  async installCertificate() {\n    return ipcRenderer.invoke('install-certificate')\n  }\n  // onLogMessage(callback: (message: string) => void) {\n  //   const subscription = (_event: IpcRendererEvent, message: string) =>\n  //     callback(message)\n  //   ipcRenderer.on('log-message', subscription)\n\n  //   return () => {\n  //     ipcRenderer.removeListener('log-message', subscription)\n  //   }\n  // }\n}\n\ncontextBridge.exposeInMainWorld('ipc', handler)\n\nexport type IpcHandler = typeof handler\n"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","require","handler","send","channel","ipcRenderer","on","callback","subscription","_event","args","removeListener","async","selectDirectory","invoke","getServerStatus","getDefaultDirectory","setDefaultDirectory","directory","getServerPort","getVendors","getASNs","storeId","vendorId","date","getPdfFiles","directoryPath","readPdfFile","filePath","getExistingDirectory","type","getExistingDirectories","onServerStatusChange","status","checkForUpdates","downloadUpdate","installUpdate","getAppVersion","onUpdateStatus","renameDocument","data","deleteFile","moveFileToZDrive","uploadPdf","checkCertificateInstalled","installCertificate","contextBridge","exposeInMainWorld"],"sourceRoot":""}